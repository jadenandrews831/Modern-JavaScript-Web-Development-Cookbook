*** Enumeration

Examine (enumeration.js).

Enumerable basically means that a property will be included if the object's properties are iterated through.

**NOTE**
'for..in' loops applied to arrays can give somewhat unexpected results, in the enumeration of an array will include not 
only all the numeric indices, but also any enumerable properties. It's a good idea to use 'for..in' loops only on objects, 
and traditional 'for' loops with numeric index iteration for arrays.

'propertyIsEnumerable(..)' tests whether the given property name exists 'directly' on the object and is also 
'enumerable:true'. 'Object.keys(..)' returns an array of all enumerable properites, whereas 
'Object.getOwnPropertyNames(..)' returns an array of all properties, enumerable or not. Whereas 'in' versus
'hasOwnProperty(..)' differ in whether they consult the '[[Prototype]]' chain or not, 'Object.keys(..)' and 
'getOwnPropertyNames(..)' both inspect only the direct object specified.

There's no built-in way to get a list of all properties that is equivalent to what the 'in' operator test would consult
(traversing all properties on the entire '[[Prototype]]' chain, as explained in Chapter 5). You could approximate such a 
utility by recursively traversing the '[[Prototype]]' chain of an object, and for each level, capturing the list from 
'Object.keys(..)'--only enumerable properties.

**Iteration

The 'for..in' loop iterates over the list of enumeratble properties on an object (including its '[[Prototype]]' chain). 
ES5 added several iteration helpers for arrays, including 'forEach(..)', 'every(..)', and 'some(..)' Each of these helpers 
accepts a function callback to apply to each element in the array, differing only in how they respectively respond to a 
return value from the callback.

'forEach(..)' will iterate over all values in the array, and it ignores any callback return values. 'every(..)' keeps going 
until the end or the callback returns a 'false/falsy' value. 'some(..)' keeps going until the end or the callback returns a 
'true/truthy' value.

These special return values inside 'every(..)' and 'some(..)' act somewhat like a 'break' statement inside a normal 'for' 
loop, in that they stop the iteration early before it reaches the end. 

**NOTE**

As contrasted with iterating over an array's indices in a numerically ordered way ('for' loop or other iterators), the 
order of iteration over an object's properties is not guaranteed and may vary between different JS engines. Do not rely on 
any observed ordering for anyting that requires consistency among evnironments, as any observed agreement is unreliable.

ES6 adds a 'for..of' lop syntax for iterating over arrays (and objects, if the object defines its own custom iterator):
(forIn.js)

'for..in' asks for an iterator object (from a default internal function known as '@@iterator' in the spec) of the thing to 
be iterated, and the loop then iterates over the successive return values from calling that iterator object's 'next()' 
method, once for each loop iteration.

Arrays have a built-in '@@iterator', so 'for..of' works easily on them. (See manualIteration.js)

**NOTE**
We get at the '@@iterator' internal property of an object using an 'ES6 Symbol': 'Symbol.iterator'. Always reference such
special properties by 'Symbo' name reference instead of by the special value it may hold. Also, despite the name's 
implications, '@@iterator' is not the iterator object itself, but a function that returns the iterator object.

The return value from an iterator's 'next()' call is an object of the form { value: .. , done: .. }, where 'value' is the 
current iteration value, and 'done' is a 'boolean' that indicated whether there's more to iterate. Notice the value '3' 
was returned with a 'done:false'. You have to call the 'next()' a fourth time (which for the 'for..of' loop automatically
does) to get 'done:true' and know you're truly done iterating. 

While arrays do automatically iterate in 'for..of' loops, regular objects do not have a built-in '@@iterator'. It is,
however, possible to define your own default '@@iterator' for any object that you care to iterate over: 
(objectIteration.js)

Each time the 'for..of' loop calls 'next()' on 'myObject''s iterator object, the internal pointer will advance and
return back the next value form the object's properties list. The iteration above is a 'value-by-value' iteration.

