**SYNTAX

Objects come in two forms: the declarative (literal) form and the constructed form:

  The literal syntzx for an object looks like this:

    var myObj = 
    {
      key: value
      // ...
    }

  The constructed form looks like this:

    var myObj = new Object();
    myObj.key = value;

The constructed form and the literal form result in exactly the same sort of object. The only difference really
is that you can add one or more key/value pairs to the literal declaration, whereas with constructed-form objects, 
you must add the properties one by one.

**NOTE**
  It is extremely uncommon to use the 'constructed form' for creating objects as just shown. You would pretty much 
  always want to use the literal syntax form. The same will be true of most of the built-in objects (explained later).

**TYPE
Objects are the general building block upon which much of JS is built. They are one of the six primary types ( called
'language types' in the specification ) in JS:
  
  * string
  * number
  * boolean
  * object
  * null
  * undefined

The simple primitives are string, number, boolean. null and undefined. They are not themselves objects. 'null' is 
sometimes referred to as an object type, but this misconception stems from a bug in the language that causes 
typeof 'null' to return the string "object" incorrectly ( and confusingly ). In fact, 'null' is its own primitive
type.

It is a common misstatement that "everything in JavaScript is an object". 

There are a few special object subtypes, which we can refer to as complex primitives.

  * 'function' is a subtype of object (technically, a "callable object"). Functions in JS are said to be "first
    class" in that they are basically just normal objects ( with callable behavior semantics bolted on ), and so
    they can be handled like any other plain object.

  * Arrays are also a form of objects, with extra behavior. The organization of contents in arrays is slightly
  more structured than for general objects.

***Built-in Objects
There are several other object subtypes, usually referred to as built-in objects. For some of them, their names seem 
to imply they are directly related to their simple primitive counterparts, but in fact, their relationship is more
complicated, which we'll explore shortly.

  * String 
  * Number 
  * Boolean 
  * Object 
  * Function
  * Array
  * Date
  * RegExp
  * Error

These built-ins have the appearance of being actual types, even classes, if you rely on the similarity to other languages
such as Java's 'String' class. But in JS, these are actually just built-in functions. Each of these built-in functions 
can be used as a constructor (that is, a function call with the new operator), with the result being a newly constructed 
object of the subtype in question.