Mixing (Up) "Class" Objects
*Class Theory

Class/inheritance describes a certain form of code organization and architecture - a way of modeling real world problem 
domains in our software.

'OO' or class-oriented programming stresses that data intrinsically has associated behavior that operates on it, so
proper design is to package up the data and the behavior together. This is sometimes called 'data structures' in
formal computer science.

Classes imply a way of 'classifying' a certain data structure. For example, a 'car' can be described as a specific
implementation of a more general "class" of things, called a vehicle. We model this relationship in software with
classes by defining a 'Vehicle' class and a 'Car' class. The definition of 'Vehicle' might include things like 
propulsion (engines, etc.), the ability to carry people, etc., which would all be the behaviors. What we define in 
'Vehicle' is all the stuff that is common to all (or most of) the different types of vehicles ( the "planes, trains and
automobiles"). To prevent redefining the basic essence of "ability to carry peope" over and over again for each
different type of of vehicle, we define that capability once in 'Vehicle' and the definition of 'Car' is said to 
specialize the general 'Vehicle' definition. While 'Vehicle' and 'Car' collectively define the behavior by way of
methods, the data in an instance would be things like the unique 'VIN' of a specific car, etc.

These ideas generally explore the concepts of classes, inheritance, and instantiation.

Another key concept with classes is polymorphism, which is the idea that a general behavior from a parent class can be
overridden in a child class to give it more specifics. In fact, relative polymorphism lets us reference the base behavior
from the overridden behavior.

Class theory strongly suggests that a parent class and a child class share the same method name for a certain behavior, so
that the child overrides the parent (differentially). This method of coding is not very user-friendly in JavaScript.

**"Class" Design Pattern

Read (https://www.bmc.com/blogs/spaghetti-code/#)

Read (https://cs.lmu.edu/~ray/notes/examplepatterns/)

***EXTERNAL NOTE***
Spaghetti Code is the set of processes and errors that may cause a technological infrastructure to fail. Caused by factors 
like unclear project scope of work, lack of experience and planning, an inability to conform a project to programming
style rules, and a number of other seemingly small errors that build up and cause your code to be less streamlined over 
time.

**JavaScript "Classes"

JS has had some class-like syntactic elements (like 'new' and 'instance of') for quite a while, and more recently in ES6,
some additions, like the 'class' keyword, but JS does not actually have classes.

Since classes are a design pattern, you can implement approximations for much of classical class functionality. JS tries 
to satisfy the extremeley pervasive desire to desgin with classes by providing seemingly class-like syntax. This boils down 
to the fact that classes are not an optinal pattern insoftware design, and you have the choice to use them in JavaScript or 
not.

*Class Mechanics
The standard library of class-oriented languages include a data structure called a 'stack' (push, pop, etc) as a 'Stack' 
class. This class has an internal set of variables that stores the data, and it would have a set of publicly accessible
behaviors ("methods") prpovided by the class, which gives your code the ability to interact with the (hidden) data.

But in such languages, you don't operate directly on 'Stack' (unless making a static class member reference). The 'Stack'
class is merely an abstract explanation of what any stack should do, but it's not itself a "stack." You must instantiate
the 'Stack' class before you have a concrete data structure 'thing' to operate against.

**Building
The traditional metaphor for "class" - and "instance"- based thinking comes from building construction.

An architect plans out all the characteristics of a building: how wide, how tall, how many windows and in what locations, 
even what type of materials to use. They don't necessarily care 'where' the building will be built, nor do they care 
'how many' copies of that building will be built. The architectural blueprints are only plans for a building. They don't 
actually constitute a building where we can walk in and sit down. We need a builder for that task. A builder will take 
those plans and follow them, exactly, as they plan to build the building. Once complete, the building is a physical 
instantiation of the blueprint plans, ideally a perfect copy. Then, the builder can move to the open lot next door and do
it all again, creating another copy.

The relationship between the building and blueprint is indirect. You can examine a blueprint to understand how the 
building was structured, for any parts where direct inspection of the building itself was insufficient. A class is a
blueprint. To actually get an object we can interact with, we must build (instantiate) something from the class. The end 
result of such "construction" is an object, typically called an instance, which we can directly call methods on and access
any public data properties from. 

**Constructor
Instances of classes are constructed by a special method of the class, usually of the same name as the class, called a 
constructor. The constructor's job is to initialize any information (state) the instance will need. Consider:

  class CoolGuy {
    specialTrick = nothing

    CoolGuy( trick ) {
      specialTrick = trick
    }

    showOff() {
      output( "Here's my trick: ", specialTrick )
    }
  }

To make a 'CoolGuy' instance, we would call the class constructor:

  Joe = new CoolGuy( "jumping rope" )
  Joe.showOff()                         // Here's my trick: jumping rope

Notice that the CoolGuy class has a constructor 'CoolGuy()', which is actually what we call when we say 'new coolGuy(..)'.
 We get an object back ( an instance of our class) from the constructor, and we can call the method 'showOff()', which
prints out that particular 'CoolGuy''s special trick.

The constructor of a class belongs to the class, and almost universally has the same name as the class. Constructors
always need to be called with 'new' to let the language engine know you want to construct a new class instance.

Class Inheritance
IN class-oriented languages, not only can you define a class that can be instantiated iteself, but you can define another
class that inherits from the first class.

The second class is often said to be a "child class," whereas the first is the "parent class". These terms obviously come
from the metaphor of parents and children, though the metaphors here are a bit stretched.

Mixins
JavaScript's object mechanism does not automatically perform copy behaviors when you inherit or instantiate. Objects don't
get copied to other objects, they get linked together. Since observed calss behaviors in other languages imply copies,
let's examine how JS developers fake the missing copy behavior of classes in JavaScripts: mixins. There are two types of
mixin: explicit and implicit. 

Let's look at an example. Since JavaScript will not automatically copy behavior, we can instead create a utility that 
manually copies. (explicitmixins.js)

Let's examine the statement 'Vehicle.drive.call( this )'. This is referred to as 'pseudopolymorphism' within the 
context of the book. JavaScripts does not (prior to ES6) have a facility for relative polymorphism. So, because both 'Car'
and 'Vehicle' had a function of the same name, 'drive()', to distinguish a call to one or the other, we made an absolute 
reference. Using explicit binding (Vehicle.drive.call()) calls the 'Vehicle.drive' function on the current object, whereas 
calling 'Vehicle.drive()' directly, the function would be called on the 'Vehicle' object. 

Because of JavaScripts' peculiarities, explicit pseudopolymorphism creates brittle manual/explicit linkage in every single
function where you need a polymorphic reference. This can significantly increate the maintenance cost. Moreover, while
explicit pseudopolymorphism can emulate the behavior of multiple inheritance, it only increases the complexity and 
brittleness.

The name "mixin" comes from an alternate way of explaining the task: 'Car' has 'Vehicle's contents mixed in, just like you
mix in chocolate chips into your favorite cookie dough.

Not much benefit is actually derived from copying a property from one object to another, as opposed to just defining the
properties twice, once on each object. 

***Parasitic inheritance
A varioation on this explicit mixin pattern, which is both in some ways explicit and in other ways implicit, is called 
"parasitic inheritance," popularized mainly by Douglas Crockford. Here's How it can work: (parasiticInheritance.js)
As you can see, we initially make a copy of the definition from the 'vehicle' parent class (object), then mix in our child
class (object) definition (preserving privileged parent-calss references as needed), and pass off this composed object 'car' 
as our child instance

**NOTE**
When we call 'new Car()', a new object is created and referenced by 'Car's 'this' reference, but since we dont use that object,
and instead return our own 'car' object, the initially reated object is just discarded.

**Implicit Mixins
Implicit mixins are closely related to explicit pseudopoymorphism, as explained previously. As such, they come 
with the same caveats and warnings: Consider (implicitMixin.js)